ARG UBUNTU_VERSION=latest
FROM ubuntu:${UBUNTU_VERSION} AS base

LABEL maintainer="Truong Thanh Tung <ttungbmt@gmail.com>"

# Set Environment Variables
ENV DEBIAN_FRONTEND noninteractive
ARG USERNAME=ubuntu
ENV USER ${USERNAME}

# Start as root
USER root

# Update Package List
RUN apt-get update -y

# Update System Packages
RUN apt-get upgrade -y

# Mandatory Software's Installation \
RUN apt-get install -y sudo lsb-release gnupg ca-certificates apt-transport-https software-properties-common build-essential

# Install Some PPAs
RUN add-apt-repository -y ppa:ubuntugis/ppa && \
    # Git
    add-apt-repository -y ppa:git-core/ppa && \
    ## Update Package Lists
    apt-get update -y

RUN apt-get install -y \
        apt-utils make cmake dos2unix gcc gettext geoip-bin cron \
        curl wget telnet net-tools iputils-ping \
        git nano vim \
        duf htop ncdu ack-grep exa \
        zip unzip libzip-dev

###########################################################################
# Ubuntu non-root user:
###########################################################################

# Add a non-root user to prevent files being created with root permissions on host machine.
ARG PUID=1000
ENV PUID ${PUID}
ARG PGID=1000
ENV PGID ${PGID}

# Add group, user
RUN groupadd -g ${PGID} ${USERNAME} && \
    useradd -l -u ${PUID} -g ${PGID} -m ${USERNAME} -s /bin/bash && \
    echo "${USERNAME}:${USERNAME}" | chpasswd && \
    echo "root:root" | chpasswd

# Method 1
RUN usermod -s /bin/bash -aG sudo ${USERNAME}

## Method 2
#RUN echo "${USERNAME} ALL = NOPASSWD: ALL" > /etc/sudoers.d/${USERNAME} && \
#    chmod 0440 /etc/sudoers.d/${USERNAME}

FROM base as workspace

#
#--------------------------------------------------------------------------
# Optional Software's Installation
#--------------------------------------------------------------------------
#
# Optional Software's will only be installed if you set them to `true`
# in the `docker-compose.yml` before the build.
# Example:
#   - INSTALL_NODE=false
#   - ...
#

###########################################################################
# Set Timezone
###########################################################################

ARG TZ=UTC
ENV TZ ${TZ}

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

###########################################################################
# Crontab
###########################################################################

USER root

COPY ./crontab /etc/cron.d

RUN chmod -R 644 /etc/cron.d

###########################################################################
# Docker:
###########################################################################

ARG INSTALL_DOCKER=true

RUN if [ ${INSTALL_DOCKER} = true ]; then \
    curl -fsSL https://get.docker.com | bash -s && \
    # Enable user to run docker commands
    usermod -aG docker ${USERNAME} && \
    # Activate the changes to groups
    newgrp docker \
;fi

###########################################################################
# ssh:
###########################################################################

ARG INSTALL_SSH=true
ARG INSTALL_SSHPASS=true

COPY .ssh/insecure_id_rsa /tmp/id_rsa
COPY .ssh/insecure_id_rsa.pub /tmp/id_rsa.pub

RUN set -eux; \
    ###########################################################################
    # SSH:
    ###########################################################################
    if [ ${INSTALL_SSH} = true ]; then \
      apt-get install -y openssh-server && \
      mkdir -p /run/sshd && \
      sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \
      sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd && \
      cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \
        && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \
        && cat /tmp/id_rsa >> /root/.ssh/id_rsa \
        && rm -f /tmp/id_rsa* \
        && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \
        && chmod 400 /root/.ssh/id_rsa \
        && cp -rf /root/.ssh /home/${USERNAME} \
        && chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/.ssh \
    ;fi; \
    ###########################################################################
    # sshpass:
    ###########################################################################
    if [ ${INSTALL_SSHPASS} = true ]; then \
      apt-get install -y sshpass; \
    fi

###########################################################################
# Supervisor
###########################################################################

ARG INSTALL_SUPERVISOR=true

COPY supervisord.conf /tmp/supervisord.conf
COPY supervisord.d /tmp/supervisord.d

RUN if [ ${INSTALL_SUPERVISOR} = true ]; then \
    apt-get install -y supervisor && \
    mkdir -p /etc/supervisord.d && \
    cat /tmp/supervisord.conf >> /etc/supervisord.conf && \
    if [ ${INSTALL_DOCKER} = true ]; then \
      cat /tmp/supervisord.d/docker.ini >> /etc/supervisord.d/docker.ini \
    ;fi && \
    if [ ${INSTALL_SSH} = true ]; then \
      cat /tmp/supervisord.d/ssh.ini >> /etc/supervisord.d/ssh.ini \
    ;fi \
;fi

###########################################################################
# Oh My ZSH!
###########################################################################

USER root

ARG SHELL_OH_MY_ZSH=true
ARG SHELL_OH_MY_ZSH_AUTOSUGESTIONS=true
ARG SHELL_OH_MY_ZSH_SYNTAX_HIGHLIGHTING=true
ARG SHELL_OH_MY_ZSH_ALIASES=true

RUN if [ ${SHELL_OH_MY_ZSH} = true ]; then \
    apt install -y zsh \
;fi

USER ${USERNAME}

RUN if [ ${SHELL_OH_MY_ZSH} = true ]; then \
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh) --keep-zshrc" && \
    echo yes | bash -c "$(curl --fail --show-error --silent --location https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh)" && \
    echo '\n# ZSH Plugins' >> ~/.zshrc && \
    if [ ${SHELL_OH_MY_ZSH_AUTOSUGESTIONS} = true ]; then \
      echo "zinit light zsh-users/zsh-autosuggestions" >> ~/.zshrc \
    ;fi && \
    if [ ${SHELL_OH_MY_ZSH_SYNTAX_HIGHLIGHTING} = true ]; then \
      echo "zinit light zsh-users/zsh-syntax-highlighting" >> ~/.zshrc \
    ;fi && \
    echo '\n# ZSH Snippet' >> ~/.zshrc && \
    if [ ${SHELL_OH_MY_ZSH_AUTOSUGESTIONS} = true ]; then \
      echo "zinit snippet https://raw.githubusercontent.com/laragis/zsh-snippets/main/bash_aliases.sh" >> ~/.zshrc \
    ;fi \
;fi

USER root

###########################################################################
# POWERLINE:
###########################################################################

USER root
ARG INSTALL_POWERLINE=false

RUN if [ ${INSTALL_POWERLINE} = true ]; then \
    if [ ${INSTALL_PYTHON} = true ]; then \
    python -m pip install --upgrade powerline-status && \
    echo "" >> /etc/bash.bashrc && \
    echo ". /usr/local/lib/python2.7/dist-packages/powerline/bindings/bash/powerline.sh" >> /etc/bash.bashrc \
  ;fi \
;fi

###########################################################################
# User Aliases
###########################################################################

USER root

COPY ./aliases.sh /root/aliases.sh
COPY ./aliases.sh /home/${USERNAME}/aliases.sh

RUN sed -i 's/\r//' /root/aliases.sh && \
    sed -i 's/\r//' /home/${USERNAME}/aliases.sh && \
    chown ${USERNAME}:${USERNAME} /home/${USERNAME}/aliases.sh && \
    echo "" >> ~/.bashrc && \
    echo "# Load Custom Aliases" >> ~/.bashrc && \
    echo "source ~/aliases.sh" >> ~/.bashrc && \
    echo "" >> ~/.bashrc

USER ${USERNAME}

RUN echo "" >> ~/.bashrc && \
    echo "# Load Custom Aliases" >> ~/.bashrc && \
    echo "source ~/aliases.sh" >> ~/.bashrc && \
    echo "" >> ~/.bashrc

USER root

###########################################################################
# bat:
###########################################################################

ARG INSTALL_BAT=true

RUN if [ ${INSTALL_BAT} = true ]; then \
    apt-get install -y bat && \
    ln -s /usr/bin/batcat /usr/local/bin/bat \
;fi

###########################################################################
# fd:
###########################################################################

ARG INSTALL_FD=true

RUN if [ ${INSTALL_FD} = true ]; then \
    apt-get install -y fd-find && \
    ln -s $(which fdfind) /usr/local/bin/fd \
;fi

###########################################################################
# WP CLI:
###########################################################################

# The command line interface for WordPress

USER root

ARG INSTALL_WP_CLI=true

RUN if [ ${INSTALL_WP_CLI} = true ]; then \
    curl -fsSL -o /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar | bash && \
    chmod +x /usr/local/bin/wp \
;fi

###########################################################################
# DNS utilities:
###########################################################################

USER root

ARG INSTALL_DNSUTILS=false

RUN if [ ${INSTALL_DNSUTILS} = true ]; then \
    apt-get update && apt-get install -y dnsutils \
;fi

###########################################################################
# Terraform:
###########################################################################

USER root

ARG INSTALL_TERRAFORM=false
ARG TERRAFORM_VERSION=1.4.6

RUN if [ ${INSTALL_TERRAFORM} = true ]; then \
    wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip \
    && unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip \
    && mv terraform /usr/local/bin \
    && rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip \
;fi

###########################################################################
# Ansible:
###########################################################################

ARG INSTALL_ANSIBLE=true

RUN add-apt-repository -y ppa:ansible/ansible && \
    apt-get update -y && \
    if [ ${INSTALL_TERRAFORM} = true ]; then \
      apt-get install -y ansible \
    ;fi

###########################################################################
# NEOVIM:
###########################################################################

USER root

ARG INSTALL_NEOVIM=true

RUN if [ ${INSTALL_NEOVIM} = true ]; then \
    add-apt-repository -y ppa:neovim-ppa/stable && \
    apt-get update -yqq && \
    apt-get install -y neovim \
;fi

###########################################################################
# PYTHON3:
###########################################################################

ARG INSTALL_PYTHON3=true

RUN if [ ${INSTALL_PYTHON3} = true ]; then \
  add-apt-repository -y ppa:deadsnakes/ppa && \
  apt-get update -yqq && \
  apt-get -y install \
    python3 python3-all-dev python3-dev python3-pip python-is-python3 \
    python3-pip python3-pil python3-lxml python3-pylibmc \
    python-is-python3 \
;fi

###########################################################################
# PHP:
###########################################################################

ARG INSTALL_PHP=true

RUN if [ ${INSTALL_PHP} = true ]; then \
  add-apt-repository -y ppa:ondrej/php && \
  apt-get update -yqq && \
  apt-get install -y \
    php8.1-cli php8.1-dev \
    php8.1-pgsql php8.1-sqlite3 php8.1-gd php8.1-imagick \
    php8.1-curl \
    php8.1-imap php8.1-mysql php8.1-mbstring \
    php8.1-xml php8.1-zip php8.1-bcmath php8.1-soap \
    php8.1-intl php8.1-readline \
    php8.1-ldap \
    php8.1-msgpack php8.1-igbinary php8.1-redis php8.1-swoole \
    php8.1-memcached php8.1-pcov php8.1-xdebug \
;fi

###########################################################################
# Composer:
###########################################################################

USER root

# Install composer and add its bin to the PATH.
RUN curl -s http://getcomposer.org/installer | php \
    && echo "export PATH=${PATH}:/var/www/vendor/bin" >> ~/.bashrc \
    && mv composer.phar /usr/local/bin/composer

# Add the composer.json
COPY ./composer.json /home/${USERNAME}/.composer/composer.json

# Add the auth.json for magento 2 credentials
COPY ./auth.json /home/${USERNAME}/.composer/auth.json

# Make sure that ~/.composer belongs to Ubuntu
RUN chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/.composer

# Export composer vendor path
RUN echo "" >> ~/.bashrc && \
    echo 'export PATH="$HOME/.composer/vendor/bin:$PATH"' >> ~/.bashrc

# Update composer
ARG COMPOSER_VERSION=2
ENV COMPOSER_VERSION ${COMPOSER_VERSION}
RUN set -eux; \
      if [ "$COMPOSER_VERSION" = "1" ] || [ "$COMPOSER_VERSION" = "2" ]; then \
          composer self-update --${COMPOSER_VERSION}; \
      else \
          composer self-update ${COMPOSER_VERSION}; \
      fi

USER ${USERNAME}

# Check if global install need to be ran
ARG COMPOSER_GLOBAL_INSTALL=false
ENV COMPOSER_GLOBAL_INSTALL ${COMPOSER_GLOBAL_INSTALL}

RUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ]; then \
    # run the install
    composer global install \
;fi

# Check if auth file is disabled
ARG COMPOSER_AUTH_JSON=false
ENV COMPOSER_AUTH_JSON ${COMPOSER_AUTH_JSON}

RUN if [ ${COMPOSER_AUTH_JSON} = false ]; then \
    # remove the file
    rm /home/${USERNAME}/.composer/auth.json \
;fi

ARG COMPOSER_REPO_PACKAGIST
ENV COMPOSER_REPO_PACKAGIST ${COMPOSER_REPO_PACKAGIST}

RUN if [ ${COMPOSER_REPO_PACKAGIST} ]; then \
    composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} \
;fi

# Export composer vendor path
RUN echo "" >> ~/.bashrc && \
    echo 'export PATH="~/.composer/vendor/bin:$PATH"' >> ~/.bashrc

USER root

###########################################################################
# Node / NVM:
###########################################################################

USER ${USERNAME}

# Check if NVM needs to be installed
ARG NODE_VERSION=lts
ENV NODE_VERSION ${NODE_VERSION}
ARG INSTALL_NODE=false
ARG INSTALL_NPM_GULP=false
ARG INSTALL_NPM_BOWER=false
ARG INSTALL_NPM_VUE_CLI=false
ARG INSTALL_NPM_ANGULAR_CLI=false
ARG NPM_REGISTRY
ENV NPM_REGISTRY ${NPM_REGISTRY}
ARG NPM_FETCH_RETRIES
ENV NPM_FETCH_RETRIES ${NPM_FETCH_RETRIES}
ARG NPM_FETCH_RETRY_FACTOR
ENV NPM_FETCH_RETRY_FACTOR ${NPM_FETCH_RETRY_FACTOR}
ARG NPM_FETCH_RETRY_MINTIMEOUT
ENV NPM_FETCH_RETRY_MINTIMEOUT ${NPM_FETCH_RETRY_MINTIMEOUT}
ARG NPM_FETCH_RETRY_MAXTIMEOUT
ENV NPM_FETCH_RETRY_MAXTIMEOUT ${NPM_FETCH_RETRY_MAXTIMEOUT}
ENV NVM_DIR /home/${USERNAME}/.nvm
ARG NVM_NODEJS_ORG_MIRROR
ENV NVM_NODEJS_ORG_MIRROR ${NVM_NODEJS_ORG_MIRROR}

RUN if [ ${INSTALL_NODE} = true ]; then \
    # Install nvm (A Node Version Manager)
    mkdir -p $NVM_DIR && \
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash \
        && . $NVM_DIR/nvm.sh \
        && nvm install ${NODE_VERSION} \
        && nvm use ${NODE_VERSION} \
        && nvm alias ${NODE_VERSION} \
        && npm cache clear --force \
        && npm config set fetch-retries ${NPM_FETCH_RETRIES} \
        && npm config set fetch-retry-factor ${NPM_FETCH_RETRY_FACTOR} \
        && npm config set fetch-retry-mintimeout ${NPM_FETCH_RETRY_MINTIMEOUT} \
        && npm config set fetch-retry-maxtimeout ${NPM_FETCH_RETRY_MAXTIMEOUT} \
        && if [ ${NPM_REGISTRY} ]; then \
        npm config set registry ${NPM_REGISTRY} \
        ;fi \
        && if [ ${INSTALL_NPM_GULP} = true ]; then \
        npm install -g gulp \
        ;fi \
        && if [ ${INSTALL_NPM_BOWER} = true ]; then \
        npm install -g bower \
        ;fi \
        && if [ ${INSTALL_NPM_VUE_CLI} = true ]; then \
        npm install -g @vue/cli \
        ;fi \
        && if [ ${INSTALL_NPM_ANGULAR_CLI} = true ]; then \
        npm install -g @angular/cli \
        ;fi \
;fi

# Wouldn't execute when added to the RUN statement in the above block
# Source NVM when loading bash since ~/.profile isn't loaded on non-login shell
RUN if [ ${INSTALL_NODE} = true ]; then \
    echo "" >> ~/.bashrc && \
    echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.bashrc && \
    echo '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm' >> ~/.bashrc \
;fi

# Add NVM binaries to root's .bashrc
USER root

RUN if [ ${INSTALL_NODE} = true ]; then \
    echo "" >> ~/.bashrc && \
    echo "export NVM_DIR=\"/home/${USERNAME}/.nvm\"" >> ~/.bashrc && \
    echo '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm' >> ~/.bashrc \
;fi

# Make it so the node modules can be executed with 'docker-compose exec'
# We'll create symbolic links into '/usr/local/bin'.
RUN if [ ${INSTALL_NODE} = true ]; then \
    find $NVM_DIR -type f -name node -exec ln -s {} /usr/local/bin/node \; && \
    NODE_MODS_DIR="$NVM_DIR/versions/node/$(node -v)/lib/node_modules" && \
    ln -s $NODE_MODS_DIR/bower/bin/bower /usr/local/bin/bower && \
    ln -s $NODE_MODS_DIR/gulp/bin/gulp.js /usr/local/bin/gulp && \
    ln -s $NODE_MODS_DIR/npm/bin/npm-cli.js /usr/local/bin/npm && \
    ln -s $NODE_MODS_DIR/npm/bin/npx-cli.js /usr/local/bin/npx && \
    ln -s $NODE_MODS_DIR/vue-cli/bin/vue /usr/local/bin/vue && \
    ln -s $NODE_MODS_DIR/vue-cli/bin/vue-init /usr/local/bin/vue-init && \
    ln -s $NODE_MODS_DIR/vue-cli/bin/vue-list /usr/local/bin/vue-list \
;fi

RUN if [ ${NPM_REGISTRY} ]; then \
    . ~/.bashrc && npm config set registry ${NPM_REGISTRY} \
;fi

# Mount .npmrc into home folder
COPY ./.npmrc /root/.npmrc
COPY ./.npmrc /home/${USERNAME}/.npmrc


###########################################################################
# PNPM:
###########################################################################

USER root

ARG INSTALL_PNPM=true
ENV PNPM_HOME="/home/${USERNAME}/.local/share/pnpm"
ENV PATH $PATH:/home/${USERNAME}/.local/share/pnpm

RUN if [ ${INSTALL_PNPM} = true ]; then \
    echo "" >> ~/.bashrc && \
    echo "export PNPM_HOME=\"/home/${USERNAME}/.local/share/pnpm\"" >> ~/.bashrc && \
    echo 'export PATH="$PNPM_HOME:$PATH"' >> ~/.bashrc && \
    npx pnpm add -g pnpm \
;fi


###########################################################################
# YARN:
###########################################################################

USER ${USERNAME}

ARG INSTALL_YARN=false
ARG YARN_VERSION=latest
ENV YARN_VERSION ${YARN_VERSION}

RUN if [ ${INSTALL_YARN} = true ]; then \
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" && \
    if [ ${YARN_VERSION} = "latest" ]; then \
        curl -o- -L https://yarnpkg.com/install.sh | bash; \
    else \
        curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}; \
    fi && \
    echo "" >> ~/.bashrc && \
    echo 'export PATH="$HOME/.yarn/bin:$PATH"' >> ~/.bashrc \
;fi

# Add YARN binaries to root's .bashrc
USER root

RUN if [ ${INSTALL_YARN} = true ]; then \
    echo "" >> ~/.bashrc && \
    echo "export YARN_DIR=\"/home/${USERNAME}/.yarn\"" >> ~/.bashrc && \
    echo 'export PATH="$YARN_DIR/bin:$PATH"' >> ~/.bashrc \
;fi

# Add PATH for YARN
ENV PATH $PATH:/home/${USERNAME}/.yarn/bin

#
#--------------------------------------------------------------------------
# Final Touch
#--------------------------------------------------------------------------
#

USER root

# Clean up
#RUN apt-get clean && \
#    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
#    rm /var/log/lastlog /var/log/faillog

# Set default work directory
RUN mkdir -p /var/www
WORKDIR /var/www

COPY start-container /usr/local/bin/start-container
RUN chmod +x /usr/local/bin/start-container

ENTRYPOINT ["start-container"]
